服务发现
=================

为什么我们需要服务发现?
---------------------------------

为了在peer节点上执行链码，将交易提交给orderer节点，并更新交易状态，应用程序需要连接SDK中公开的API。

然而，SDK需要大量信息，以便允许应用程序连接到相关的网络节点。除了通道上orderer节点和peer节点的CA和TLS证书及其IP地址和端口号之外，它还必须知道相关的签名策略以及已安装链码的peer（这样应用程序才能知道将链码提案发送给哪个peer节点）。

在v1.2之前，这些信息是静态编码的。然而，这种实现对网络更改（例如添加已安装相关链码的peer节点或peer节点宕机）的响应不是动态的。静态配置也不允许应用程序对背书策略本身的更改做出反应（如新组织加入通道时可能发生的情况）。

此外，客户端应用程序无法知道哪些peer节点已更新账本，哪些未更新。结果是，该应用程序可能向与网络其他节点账本不同步的peer节点提交提案，从而导致事务在提交时失效并浪费资源。

上述的 **服务发现** 通过让peer节点动态地计算所需的信息并以可消耗的方式将其提供给SDK，改进了这个过程。

Fabric中服务发现的工作方式
-------------------------------------

应用程序启动时被引导得知应用程序开发人员/管理员所信任的一组peer节点，以便为发现查询提供可信的响应。客户端应用程序所使用的良好参与节点也是该组织中的peer节点。请注意，为了被服务发现所识别，peer节点必须定义一个 ``EXTERNAL_ENDPOINT`` 。要查看如何执行此操作，请查看我们的文档:doc:`discovery-cli` 

应用程序向服务发现发出配置查询，并获取与网络的其余节点通信所需的所有静态信息。通过向peer节点的服务发现发送后续查询，可以随时刷新此信息。

该服务在peer节点（而不是应用程序）上运行，并使用gossip通信层维护的网络元数据信息来找出哪些peer节点处于联机状态。它还从peer节点的状态数据库中获取信息，例如相关的签名策略等。

通过服务发现，应用程序不再需要指定为他们背书的peer节点。SDK可以简单地将查询发送给服务发现，以询问给定通道和链码ID所对应的peer节点。然后，服务发现将计算由两个对象组成的描述符：

1. **布局**: peer组的列表，以及每个组中应当选取的peer节点数。
2. **组到peer的映射**: 从布局中的组到通道的peer节点。实际上，每个组很可能是代表各个组织的peer节点，但是由于服务API是通用的并且与组织无关，因此这只是一个“组”。

下面是一个``AND(Org1, Org2)``策略的描述符示例，其中每个组织中有两个peer节点。

.. code-block:: JSON

   Layouts: [
        QuantitiesByGroup: {
          “Org1”: 1,
          “Org2”: 1,
        }
   ],
   EndorsersByGroups: {
     “Org1”: [peer0.org1, peer1.org1],
     “Org2”: [peer0.org2, peer1.org2]
   }


换言之，背书策略需要来自Org1中一个peer节点和Org2中一个peer节点的签名。它提供了组织中可以背书的（Org1和Org2中都有``peer0``和 ``peer1``）peer节点的名称。

SDK选择布局后，根据客户端指定的标准对布局中的peer节点进行选择(SDK可以这样做是因为它能够可以访问账本高度等元数据)。例如，它可以根据布局中每个组的peer节点的数量，优先选择具有更高的账本高度的peer节点，或者排除应用程序发现的处于脱机状态的peer节点。如果无法根据标准选定一个peer节点, SDK将从最符合标准的peer节点中随机选择。

发现服务的功能
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

发现服务可以响应以下查询：

* **配置查询**: 返回通道中所有组织和通道中orderer终端的 ``MSPConfig``
* **Peer 成员查询**: 返回已加入通道的Peer节点。
* **背书查询**: 返回通道中给定链码的背书描述符。
* **本地peer身份查询**: 返回响应查询的peer节点的本地成员信息。默认情况下，客户端需要是peer节点的管理员才能响应此查询。

特殊要求
~~~~~~~~~~~~~~~~~~~~~~
当peer节点在启用TLS的情况下运行时，客户端在连接到peer节点时必须提供TLS证书。如果未将peer节点配置为验证客户端证书（clientAuthRequired为false），则此TLS证书可以是自签名的。

.. Licensed under Creative Commons Attribution 4.0 International License
   https://creativecommons.org/licenses/by/4.0/
